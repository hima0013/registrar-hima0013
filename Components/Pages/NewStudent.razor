@page "/new-student"
@using registrar_hima0013.Models
@using registrar_hima0013.Data
@using registrar_hima0013.Components
@inject NavigationManager NavigationManager

<h3>Add Student</h3>

<div class="form-group">
    <label>First Name</label>
    <input class="form-control" @bind="firstName" />
</div>

<div class="form-group">
    <label>Last Name</label>
    <input class="form-control" @bind="lastName" />
</div>

<div class="form-group">
    <label>Student Type</label>
    <select class="form-control" @bind="selectedType">
        @foreach (var type in studentTypes)
        {
            <option value="@type">@type</option>
        }
    </select>
</div>

<p class="mt-3">Select Courses:</p>
<CourseSelector Courses="availableCourses" Selections="courseSelections" />

<div class="form-group mt-3">
    <button class="btn btn-primary" @onclick="AddStudent">Add Student</button>
    <a class="btn btn-secondary ms-2" href="/students">Cancel</a>
</div>

@code {
    private string? firstName;
    private string? lastName;
    private string? selectedType;
    private List<string> studentTypes = Helper.GetStudentTypes();

    private List<Course> availableCourses = Helper.GetCourses();
    private Dictionary<string, bool> courseSelections = new();

    protected override void OnInitialized()
    {
        foreach (var course in availableCourses)
        {
            courseSelections[course.Code] = false;
        }
    }

    private void AddStudent()
    {
        var selectedCourses = availableCourses
            .Where(c => courseSelections.ContainsKey(c.Code) && courseSelections[c.Code])
            .ToList();

        var student = new Student
        {
            FirstName = firstName!,
            LastName = lastName!,
            Type = selectedType!,
            Courses = selectedCourses
        };

        Helper.AddStudent(student);
        NavigationManager.NavigateTo("/students");
    }
}
