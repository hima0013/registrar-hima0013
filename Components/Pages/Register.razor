@page "/register/{studentId:int}"
@using registrar_hima0013.Models
@using registrar_hima0013.Data
@using Microsoft.AspNetCore.Components.Forms
@using Microsoft.EntityFrameworkCore
@inject RegistrarContext dbContext
@inject NavigationManager navManager
@inject IJSRuntime JS

<h3>Course Registration</h3>

@if (student == null || courses == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <EditForm Model="@this" OnValidSubmit="SaveRegistration">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <p><strong>Student:</strong> @student.FirstName @student.LastName (@student.Type)</p>

        @foreach (var course in courses)
        {
            <div>
                <input type="checkbox" @bind="course.IsSelected" />
                <label>@course.Name (@course.WeeklyHours hrs)</label>
            </div>
        }

        <button type="submit" class="btn btn-primary">Register Courses</button>
        <button class="btn btn-secondary" @onclick="@(() => navManager.NavigateTo("/students"))">Cancel</button>
    </EditForm>
}

@code {
    [Parameter] public int studentId { get; set; }
    private Student? student;
    private List<CheckboxCourse> courses = new();

    protected override async Task OnInitializedAsync()
    {
        student = await dbContext.Students.FindAsync(studentId);

        if (student == null)
        {
            navManager.NavigateTo("/students");
            return;
        }

        var allCourses = await dbContext.Courses.ToListAsync();
        var studentCourses = await dbContext.Registrations
            .Where(r => r.StudentId == studentId)
            .Select(r => r.CourseId)
            .ToListAsync();

        courses = allCourses.Select(c => new CheckboxCourse
        {
            Id = c.Id,
            Name = c.Name,
            WeeklyHours = c.WeeklyHours,
            IsSelected = studentCourses.Contains(c.Id)
        }).ToList();
    }

    private async Task SaveRegistration()
    {
        int totalHours = courses.Where(c => c.IsSelected).Sum(c => c.WeeklyHours);
        int totalCourses = courses.Count(c => c.IsSelected);

        string validationMessage = student?.Type switch
        {
            "Full-time" when totalHours > 16
                => "Full-time students cannot exceed 16 weekly hours.",
            "Part-time" when totalCourses > 3
                => "Part-time students cannot register for more than 3 courses.",
            "Coop" when totalHours > 4 || totalCourses > 2
                => "Coop students cannot exceed 4 weekly hours and 2 courses.",
            _ => ""
        };

        if (!string.IsNullOrEmpty(validationMessage))
        {
            await JS.InvokeVoidAsync("alert", validationMessage);
            return;
        }

        var oldRegistrations = dbContext.Registrations.Where(r => r.StudentId == studentId);
        dbContext.Registrations.RemoveRange(oldRegistrations);

        foreach (var course in courses.Where(c => c.IsSelected))
        {
            dbContext.Registrations.Add(new Registration
            {
                StudentId = studentId,
                CourseId = course.Id
            });
        }

        await dbContext.SaveChangesAsync();

        await JS.InvokeVoidAsync("alert", $"Successfully registered for {totalCourses} courses ({totalHours} weekly hours).");

        navManager.NavigateTo("/students");
    }

    class CheckboxCourse
    {
        public int Id { get; set; }
        public string Name { get; set; } = "";
        public int WeeklyHours { get; set; }
        public bool IsSelected { get; set; }
    }
}
