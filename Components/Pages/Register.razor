@page "/register/{id:int}"
@using registrar_hima0013.Models
@using registrar_hima0013.Data
@inject NavigationManager NavigationManager

<h3>Register Student</h3>

@if (student == null)
{
    <p>Invalid student. Redirecting...</p>
}
else
{
    <div>
        <strong>@student.FirstName @student.LastName - @student.Id</strong>
    </div>

    <p class="mt-3">The following courses are currently available for registration:</p>

    <div>
        @foreach (var course in availableCourses)
        {
            <div class="form-check">
                <input type="checkbox" class="form-check-input"
                       checked="@student.Courses.Any(c => c.Code == course.Code)" disabled />
                <label class="form-check-label">
                    @($"{course.Code} {course.Title} - {course.WeeklyHours} hour{(course.WeeklyHours == 1 ? "" : "s")} per week")
                </label>
            </div>
        }
    </div>

    <div class="mt-3">
        <a class="btn btn-primary" href="/students">Back to Students</a>
    </div>
}

@code {
    [Parameter]
    public int id { get; set; }

    private Student student;
    private List<Course> availableCourses = new();

    protected override void OnInitialized()
    {
        student = Helper.GetStudents().FirstOrDefault(s => s.Id == id);
        availableCourses = Helper.GetCourses();

        if (student == null)
        {
            // Delay briefly then redirect
            Task.Run(async () =>
            {
                await Task.Delay(2000);
                NavigationManager.NavigateTo("/students");
            });
        }
    }
}
